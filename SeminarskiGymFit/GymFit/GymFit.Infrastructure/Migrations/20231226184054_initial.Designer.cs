// <auto-generated />
using System;
using GymFit.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GymFit.Infrastructure.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20231226184054_initial")]
    partial class initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("GymFit.Core.Arrivals", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ArrivalTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DepartureTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("GymId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ReservationId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("UserPackageId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GymId");

                    b.HasIndex("ReservationId");

                    b.HasIndex("UserId");

                    b.HasIndex("UserPackageId");

                    b.ToTable("Arrivals");
                });

            modelBuilder.Entity("GymFit.Core.Certificates", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Issuer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Certificates");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2023, 2, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            IsDeleted = false,
                            Issuer = "Arena Mostar",
                            Title = "Personalni trener"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2023, 2, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            IsDeleted = false,
                            Issuer = "DIF Mostar",
                            Title = "Sportski trener"
                        });
                });

            modelBuilder.Entity("GymFit.Core.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Citys");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CountryId = 1,
                            CreatedAt = new DateTime(2023, 2, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Mostar",
                            ZipCode = "88000"
                        },
                        new
                        {
                            Id = 2,
                            CountryId = 1,
                            CreatedAt = new DateTime(2023, 2, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Sarajevo",
                            ZipCode = "77000"
                        },
                        new
                        {
                            Id = 3,
                            CountryId = 1,
                            CreatedAt = new DateTime(2023, 2, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Zenica",
                            ZipCode = "72000"
                        });
                });

            modelBuilder.Entity("GymFit.Core.ClientProgress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal?>("Arms")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("BMI")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("Calf")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("Chest")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("Height")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("Hips")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("Quadriceps")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("Shoulders")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("Stomach")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<decimal?>("Waist")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("Weight")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("ClientProgress");
                });

            modelBuilder.Entity("GymFit.Core.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Abbreviation = "BIH",
                            CreatedAt = new DateTime(2023, 2, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Bosnia and Herzegovina"
                        },
                        new
                        {
                            Id = 2,
                            Abbreviation = "HR",
                            CreatedAt = new DateTime(2023, 2, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Croatia"
                        },
                        new
                        {
                            Id = 3,
                            Abbreviation = "SRB",
                            CreatedAt = new DateTime(2023, 2, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Serbia"
                        },
                        new
                        {
                            Id = 4,
                            Abbreviation = "CG",
                            CreatedAt = new DateTime(2023, 2, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Montenegro"
                        },
                        new
                        {
                            Id = 5,
                            Abbreviation = "SLO",
                            CreatedAt = new DateTime(2023, 2, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Slovenia"
                        },
                        new
                        {
                            Id = 6,
                            Abbreviation = "AT",
                            CreatedAt = new DateTime(2023, 2, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Austria"
                        });
                });

            modelBuilder.Entity("GymFit.Core.GroupReservations", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Arrived")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ConfirmationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ReservationId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ReservationId");

                    b.HasIndex("UserId");

                    b.ToTable("GroupReservations");
                });

            modelBuilder.Entity("GymFit.Core.Gym", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CityId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PhotoId")
                        .HasColumnType("int");

                    b.Property<string>("Website")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("PhotoId");

                    b.ToTable("Gyms");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "88000 Mostar",
                            CreatedAt = new DateTime(2023, 2, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            Description = "Najbolja ponuda sportskig aktivnosti u GymFit",
                            IsDeleted = false,
                            Name = "GymFit1",
                            PhoneNumber = "38762211211",
                            Website = "www.gymfit.com"
                        },
                        new
                        {
                            Id = 2,
                            Address = "88000 Mostar",
                            CreatedAt = new DateTime(2023, 2, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            Description = "Najbolja ponuda sportskig aktivnosti u GymFit",
                            IsDeleted = false,
                            Name = "GymFit2",
                            PhoneNumber = "38762211212",
                            Website = "www.gymfit.com"
                        });
                });

            modelBuilder.Entity("GymFit.Core.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateRead")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("Deleted")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("Read")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("Seen")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("SendOnDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Content = "Sretnu novu godinu želi vam GymFit",
                            CreatedAt = new DateTime(2023, 2, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            Deleted = false,
                            IsDeleted = false,
                            Read = false,
                            SendOnDate = new DateTime(2023, 12, 26, 19, 40, 52, 967, DateTimeKind.Local).AddTicks(907),
                            UserId = 4
                        },
                        new
                        {
                            Id = 2,
                            Content = "Imamo novog trenera za yogu, pogledajte naše trenere",
                            CreatedAt = new DateTime(2023, 2, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            Deleted = false,
                            IsDeleted = false,
                            Read = false,
                            SendOnDate = new DateTime(2023, 12, 26, 19, 40, 52, 967, DateTimeKind.Local).AddTicks(909),
                            UserId = 4
                        },
                        new
                        {
                            Id = 3,
                            Content = "Sretnu novu godinu želi vam GymFit",
                            CreatedAt = new DateTime(2023, 2, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            Deleted = false,
                            IsDeleted = false,
                            Read = false,
                            SendOnDate = new DateTime(2023, 12, 26, 19, 40, 52, 967, DateTimeKind.Local).AddTicks(912),
                            UserId = 5
                        },
                        new
                        {
                            Id = 4,
                            Content = "Imamo novog trenera za yogu, pogledajte naše trenere",
                            CreatedAt = new DateTime(2023, 2, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            Deleted = false,
                            IsDeleted = false,
                            Read = false,
                            SendOnDate = new DateTime(2023, 12, 26, 19, 40, 52, 967, DateTimeKind.Local).AddTicks(914),
                            UserId = 5
                        });
                });

            modelBuilder.Entity("GymFit.Core.Package", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("Package");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2023, 2, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            IsDeleted = false,
                            description = "Standardna clanarina",
                            name = "Standard",
                            price = 50m
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2023, 2, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            IsDeleted = false,
                            description = "Premium članarina, neogranicen broj posjeta",
                            name = "Premium",
                            price = 70m
                        });
                });

            modelBuilder.Entity("GymFit.Core.Photo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("Data")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<Guid>("GuidId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("ThumbnailContent")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.HasKey("Id");

                    b.ToTable("Photos");
                });

            modelBuilder.Entity("GymFit.Core.Post", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("PublishDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Post");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2023, 2, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            IsDeleted = false,
                            PublishDate = new DateTime(2023, 12, 26, 19, 40, 52, 967, DateTimeKind.Local).AddTicks(926),
                            Status = 0,
                            content = "Sretnu novu godinu želi vam GymFit",
                            title = "Sretna nova godina"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2023, 2, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            IsDeleted = false,
                            PublishDate = new DateTime(2023, 12, 26, 19, 40, 52, 967, DateTimeKind.Local).AddTicks(928),
                            Status = 0,
                            content = "Imamo novog trenera za yogu, pogledajte naše trenere",
                            title = "Novi trener"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2023, 2, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            IsDeleted = false,
                            PublishDate = new DateTime(2023, 12, 26, 19, 40, 52, 967, DateTimeKind.Local).AddTicks(929),
                            Status = 0,
                            content = "Imamo novog trenera - Armin Idriz",
                            title = "Novi trener"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2023, 2, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            IsDeleted = false,
                            PublishDate = new DateTime(2023, 12, 26, 19, 40, 52, 967, DateTimeKind.Local).AddTicks(931),
                            Status = 0,
                            content = "TEretana GymFit neće raditi 2 dana nakon nove godine",
                            title = "Neradni dani"
                        });
                });

            modelBuilder.Entity("GymFit.Core.Reservation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DaysOfWeek")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Duration")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("GymId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int?>("MaxCapacity")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("PauseDuration")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReservationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int?>("TrainerId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<bool?>("isUsed")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("GymId");

                    b.HasIndex("TrainerId");

                    b.HasIndex("UserId");

                    b.ToTable("Reservations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2023, 2, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            Description = "Snaga",
                            EndDate = new DateTime(2023, 12, 24, 16, 0, 0, 0, DateTimeKind.Unspecified),
                            GymId = 2,
                            IsDeleted = false,
                            ReservationDate = new DateTime(2023, 12, 24, 15, 0, 0, 0, DateTimeKind.Unspecified),
                            StartDate = new DateTime(2023, 12, 24, 15, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 4,
                            TrainerId = 3,
                            UserId = 4,
                            isUsed = true
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2023, 2, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            Description = "HIT",
                            EndDate = new DateTime(2023, 12, 24, 16, 0, 0, 0, DateTimeKind.Unspecified),
                            GymId = 2,
                            IsDeleted = false,
                            ReservationDate = new DateTime(2023, 12, 25, 15, 0, 0, 0, DateTimeKind.Unspecified),
                            StartDate = new DateTime(2023, 12, 25, 15, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 4,
                            TrainerId = 3,
                            UserId = 4,
                            isUsed = true
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2023, 2, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            Description = "CrossFit",
                            EndDate = new DateTime(2023, 12, 28, 19, 0, 0, 0, DateTimeKind.Unspecified),
                            GymId = 2,
                            IsDeleted = false,
                            ReservationDate = new DateTime(2023, 12, 24, 15, 0, 0, 0, DateTimeKind.Unspecified),
                            StartDate = new DateTime(2023, 12, 28, 18, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 3,
                            TrainerId = 3,
                            UserId = 4,
                            isUsed = false
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2023, 2, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            Description = "Individualni",
                            EndDate = new DateTime(2023, 12, 24, 16, 0, 0, 0, DateTimeKind.Unspecified),
                            GymId = 2,
                            IsDeleted = false,
                            ReservationDate = new DateTime(2023, 12, 24, 15, 0, 0, 0, DateTimeKind.Unspecified),
                            StartDate = new DateTime(2023, 12, 24, 15, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 4,
                            TrainerId = 2,
                            UserId = 4,
                            isUsed = true
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2023, 2, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            Description = "Snaga",
                            EndDate = new DateTime(2024, 1, 30, 11, 0, 0, 0, DateTimeKind.Unspecified),
                            GymId = 2,
                            IsDeleted = false,
                            ReservationDate = new DateTime(2024, 1, 30, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            StartDate = new DateTime(2024, 1, 30, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 2,
                            TrainerId = 2,
                            UserId = 4,
                            isUsed = false
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2023, 2, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            Description = "Kardio",
                            EndDate = new DateTime(2024, 1, 29, 19, 0, 0, 0, DateTimeKind.Unspecified),
                            GymId = 2,
                            IsDeleted = false,
                            ReservationDate = new DateTime(2024, 1, 29, 18, 0, 0, 0, DateTimeKind.Unspecified),
                            StartDate = new DateTime(2024, 1, 29, 18, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 2,
                            TrainerId = 2,
                            UserId = 4,
                            isUsed = false
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2023, 2, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            Description = "Kombinovani",
                            EndDate = new DateTime(2024, 2, 3, 19, 0, 0, 0, DateTimeKind.Unspecified),
                            GymId = 2,
                            IsDeleted = false,
                            ReservationDate = new DateTime(2024, 2, 3, 18, 0, 0, 0, DateTimeKind.Unspecified),
                            StartDate = new DateTime(2024, 2, 3, 18, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 1,
                            TrainerId = 2,
                            UserId = 4,
                            isUsed = false
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(2023, 2, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            Description = "CrossFit",
                            EndDate = new DateTime(2024, 2, 4, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            GymId = 2,
                            IsDeleted = false,
                            ReservationDate = new DateTime(2024, 2, 4, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            StartDate = new DateTime(2024, 2, 4, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 1,
                            TrainerId = 2,
                            UserId = 4,
                            isUsed = false
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTime(2023, 2, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            Description = "Yoga",
                            EndDate = new DateTime(2023, 12, 23, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            GymId = 2,
                            IsDeleted = false,
                            ReservationDate = new DateTime(2023, 12, 23, 11, 0, 0, 0, DateTimeKind.Unspecified),
                            StartDate = new DateTime(2023, 12, 23, 11, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 4,
                            TrainerId = 2,
                            UserId = 5,
                            isUsed = true
                        },
                        new
                        {
                            Id = 10,
                            CreatedAt = new DateTime(2023, 2, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            Description = "Pilates",
                            EndDate = new DateTime(2023, 12, 27, 16, 0, 0, 0, DateTimeKind.Unspecified),
                            GymId = 2,
                            IsDeleted = false,
                            ReservationDate = new DateTime(2023, 12, 27, 15, 0, 0, 0, DateTimeKind.Unspecified),
                            StartDate = new DateTime(2023, 12, 27, 15, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 4,
                            TrainerId = 2,
                            UserId = 5,
                            isUsed = true
                        },
                        new
                        {
                            Id = 11,
                            CreatedAt = new DateTime(2023, 2, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            Description = "Pilates",
                            EndDate = new DateTime(2023, 12, 29, 21, 0, 0, 0, DateTimeKind.Unspecified),
                            GymId = 2,
                            IsDeleted = false,
                            ReservationDate = new DateTime(2023, 12, 29, 20, 0, 0, 0, DateTimeKind.Unspecified),
                            StartDate = new DateTime(2023, 12, 29, 20, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 3,
                            TrainerId = 2,
                            UserId = 5,
                            isUsed = false
                        },
                        new
                        {
                            Id = 12,
                            CreatedAt = new DateTime(2023, 2, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            Description = "Pilates",
                            EndDate = new DateTime(2023, 12, 26, 16, 0, 0, 0, DateTimeKind.Unspecified),
                            GymId = 2,
                            IsDeleted = false,
                            ReservationDate = new DateTime(2023, 12, 26, 15, 0, 0, 0, DateTimeKind.Unspecified),
                            StartDate = new DateTime(2023, 12, 26, 15, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 4,
                            TrainerId = 3,
                            UserId = 5,
                            isUsed = true
                        },
                        new
                        {
                            Id = 13,
                            CreatedAt = new DateTime(2023, 2, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            Description = "Kombinovani",
                            EndDate = new DateTime(2024, 1, 28, 18, 0, 0, 0, DateTimeKind.Unspecified),
                            GymId = 2,
                            IsDeleted = false,
                            ReservationDate = new DateTime(2024, 1, 28, 17, 0, 0, 0, DateTimeKind.Unspecified),
                            StartDate = new DateTime(2024, 1, 28, 17, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 2,
                            TrainerId = 3,
                            UserId = 5,
                            isUsed = false
                        },
                        new
                        {
                            Id = 14,
                            CreatedAt = new DateTime(2023, 2, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            Description = "Kardio",
                            EndDate = new DateTime(2024, 1, 25, 19, 0, 0, 0, DateTimeKind.Unspecified),
                            GymId = 2,
                            IsDeleted = false,
                            ReservationDate = new DateTime(2024, 1, 25, 18, 0, 0, 0, DateTimeKind.Unspecified),
                            StartDate = new DateTime(2024, 1, 25, 18, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 2,
                            TrainerId = 2,
                            UserId = 5,
                            isUsed = false
                        },
                        new
                        {
                            Id = 15,
                            CreatedAt = new DateTime(2023, 2, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            Description = "Yoga",
                            EndDate = new DateTime(2024, 2, 5, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            GymId = 2,
                            IsDeleted = false,
                            ReservationDate = new DateTime(2024, 2, 5, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            StartDate = new DateTime(2024, 2, 5, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 1,
                            TrainerId = 2,
                            UserId = 5,
                            isUsed = false
                        },
                        new
                        {
                            Id = 16,
                            CreatedAt = new DateTime(2023, 2, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            Description = "Pilates",
                            EndDate = new DateTime(2024, 2, 6, 22, 0, 0, 0, DateTimeKind.Unspecified),
                            GymId = 2,
                            IsDeleted = false,
                            ReservationDate = new DateTime(2024, 2, 6, 21, 0, 0, 0, DateTimeKind.Unspecified),
                            StartDate = new DateTime(2024, 2, 6, 21, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 1,
                            TrainerId = 3,
                            UserId = 5,
                            isUsed = false
                        });
                });

            modelBuilder.Entity("GymFit.Core.TrainerCertificate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CertificateId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfAchievement")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Issuer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TrainerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CertificateId");

                    b.HasIndex("TrainerId");

                    b.ToTable("TrainerCertificates");
                });

            modelBuilder.Entity("GymFit.Core.Transactions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("PayPalTransactionId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("userPackageId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("userPackageId");

                    b.ToTable("Traansactions");
                });

            modelBuilder.Entity("GymFit.Core.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CityId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsVerified")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PhotoId")
                        .HasColumnType("int");

                    b.Property<string>("ProfessionalTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("PhotoId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2023, 2, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            DateOfBirth = new DateTime(2023, 2, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            Email = "admin@gmail.com",
                            FirstName = "GymFIT",
                            Gender = 0,
                            IsActive = true,
                            IsDeleted = false,
                            IsVerified = true,
                            LastName = "Admin",
                            PasswordHash = "b4I5yA4Mp+0Pg1C3EsKU17sS13eDExGtBjjI07Vh/JM=",
                            PasswordSalt = "1wQEjdSFeZttx6dlvEDjOg==",
                            PhoneNumber = "38763321321",
                            ProfessionalTitle = "Admin",
                            Role = 0
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2023, 2, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            DateOfBirth = new DateTime(2023, 2, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            Email = "trener@gmail.com",
                            FirstName = "Trener1",
                            Gender = 0,
                            IsActive = true,
                            IsDeleted = false,
                            IsVerified = true,
                            LastName = "Trener1",
                            PasswordHash = "b4I5yA4Mp+0Pg1C3EsKU17sS13eDExGtBjjI07Vh/JM=",
                            PasswordSalt = "1wQEjdSFeZttx6dlvEDjOg==",
                            PhoneNumber = "38763321321",
                            ProfessionalTitle = "Trener",
                            Role = 2
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2023, 2, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            DateOfBirth = new DateTime(2023, 2, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            Email = "trener@gmail.com",
                            FirstName = "Trener2",
                            Gender = 0,
                            IsActive = true,
                            IsDeleted = false,
                            IsVerified = true,
                            LastName = "Trener2",
                            PasswordHash = "b4I5yA4Mp+0Pg1C3EsKU17sS13eDExGtBjjI07Vh/JM=",
                            PasswordSalt = "1wQEjdSFeZttx6dlvEDjOg==",
                            PhoneNumber = "38763321321",
                            ProfessionalTitle = "Trener",
                            Role = 2
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2023, 2, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            DateOfBirth = new DateTime(2023, 2, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            Email = "user@gmail.com",
                            FirstName = "User",
                            Gender = 1,
                            IsActive = true,
                            IsDeleted = false,
                            IsVerified = true,
                            LastName = "User",
                            PasswordHash = "b4I5yA4Mp+0Pg1C3EsKU17sS13eDExGtBjjI07Vh/JM=",
                            PasswordSalt = "1wQEjdSFeZttx6dlvEDjOg==",
                            PhoneNumber = "38763321321",
                            ProfessionalTitle = "User",
                            Role = 1
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2023, 2, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            DateOfBirth = new DateTime(2023, 2, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            Email = "user2@gmail.com",
                            FirstName = "User2",
                            Gender = 0,
                            IsActive = true,
                            IsDeleted = false,
                            IsVerified = true,
                            LastName = "User2",
                            PasswordHash = "b4I5yA4Mp+0Pg1C3EsKU17sS13eDExGtBjjI07Vh/JM=",
                            PasswordSalt = "1wQEjdSFeZttx6dlvEDjOg==",
                            PhoneNumber = "38763321321",
                            ProfessionalTitle = "User",
                            Role = 1
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2023, 2, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            DateOfBirth = new DateTime(2023, 2, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            Email = "admin2@gmail.com",
                            FirstName = "Admin2",
                            Gender = 1,
                            IsActive = true,
                            IsDeleted = false,
                            IsVerified = true,
                            LastName = "Admin2",
                            PasswordHash = "b4I5yA4Mp+0Pg1C3EsKU17sS13eDExGtBjjI07Vh/JM=",
                            PasswordSalt = "1wQEjdSFeZttx6dlvEDjOg==",
                            PhoneNumber = "38763321321",
                            ProfessionalTitle = "Admin",
                            Role = 0
                        });
                });

            modelBuilder.Entity("GymFit.Core.UserPackage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("ActivateOnDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ActivationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Expired")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsPaused")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("PauseDuration")
                        .HasColumnType("int");

                    b.Property<DateTime?>("PausedOnDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("packageId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("packageId");

                    b.ToTable("UserPackages");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ActivateOnDate = new DateTime(2023, 12, 26, 19, 40, 52, 967, DateTimeKind.Local).AddTicks(872),
                            ActivationDate = new DateTime(2023, 12, 26, 19, 40, 52, 967, DateTimeKind.Local).AddTicks(839),
                            CreatedAt = new DateTime(2023, 2, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            ExpirationDate = new DateTime(2024, 2, 26, 19, 40, 52, 967, DateTimeKind.Local).AddTicks(869),
                            Expired = false,
                            IsDeleted = false,
                            IsPaused = false,
                            PauseDuration = 0,
                            PausedOnDate = new DateTime(2023, 12, 26, 19, 40, 52, 967, DateTimeKind.Local).AddTicks(874),
                            UserId = 4,
                            packageId = 1
                        },
                        new
                        {
                            Id = 2,
                            ActivateOnDate = new DateTime(2023, 12, 26, 19, 40, 52, 967, DateTimeKind.Local).AddTicks(879),
                            ActivationDate = new DateTime(2023, 12, 26, 19, 40, 52, 967, DateTimeKind.Local).AddTicks(876),
                            CreatedAt = new DateTime(2023, 2, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            ExpirationDate = new DateTime(2024, 1, 26, 19, 40, 52, 967, DateTimeKind.Local).AddTicks(877),
                            Expired = false,
                            IsDeleted = false,
                            IsPaused = false,
                            PauseDuration = 0,
                            PausedOnDate = new DateTime(2023, 12, 26, 19, 40, 52, 967, DateTimeKind.Local).AddTicks(880),
                            UserId = 5,
                            packageId = 1
                        },
                        new
                        {
                            Id = 3,
                            ActivateOnDate = new DateTime(2023, 12, 26, 19, 40, 52, 967, DateTimeKind.Local).AddTicks(885),
                            ActivationDate = new DateTime(2023, 10, 26, 19, 40, 52, 967, DateTimeKind.Local).AddTicks(882),
                            CreatedAt = new DateTime(2023, 2, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            ExpirationDate = new DateTime(2023, 11, 26, 19, 40, 52, 967, DateTimeKind.Local).AddTicks(883),
                            Expired = false,
                            IsDeleted = false,
                            IsPaused = false,
                            PauseDuration = 0,
                            PausedOnDate = new DateTime(2023, 12, 26, 19, 40, 52, 967, DateTimeKind.Local).AddTicks(886),
                            UserId = 4,
                            packageId = 1
                        },
                        new
                        {
                            Id = 4,
                            ActivateOnDate = new DateTime(2023, 12, 26, 19, 40, 52, 967, DateTimeKind.Local).AddTicks(890),
                            ActivationDate = new DateTime(2023, 10, 26, 19, 40, 52, 967, DateTimeKind.Local).AddTicks(888),
                            CreatedAt = new DateTime(2023, 2, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            ExpirationDate = new DateTime(2023, 11, 26, 19, 40, 52, 967, DateTimeKind.Local).AddTicks(889),
                            Expired = false,
                            IsDeleted = false,
                            IsPaused = false,
                            PauseDuration = 0,
                            PausedOnDate = new DateTime(2023, 12, 26, 19, 40, 52, 967, DateTimeKind.Local).AddTicks(892),
                            UserId = 5,
                            packageId = 1
                        });
                });

            modelBuilder.Entity("GymFit.Core.Arrivals", b =>
                {
                    b.HasOne("GymFit.Core.Gym", "Gym")
                        .WithMany("Arrivals")
                        .HasForeignKey("GymId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GymFit.Core.Reservation", "Reservation")
                        .WithMany("Arrivals")
                        .HasForeignKey("ReservationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("GymFit.Core.User", "User")
                        .WithMany("Arrivals")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("GymFit.Core.UserPackage", "UserPackage")
                        .WithMany("Arrivals")
                        .HasForeignKey("UserPackageId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Gym");

                    b.Navigation("Reservation");

                    b.Navigation("User");

                    b.Navigation("UserPackage");
                });

            modelBuilder.Entity("GymFit.Core.City", b =>
                {
                    b.HasOne("GymFit.Core.Country", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("GymFit.Core.ClientProgress", b =>
                {
                    b.HasOne("GymFit.Core.User", "User")
                        .WithMany("ClientProgress")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("GymFit.Core.GroupReservations", b =>
                {
                    b.HasOne("GymFit.Core.Reservation", "Reservation")
                        .WithMany("GroupReservations")
                        .HasForeignKey("ReservationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GymFit.Core.User", "User")
                        .WithMany("GroupReservations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Reservation");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GymFit.Core.Gym", b =>
                {
                    b.HasOne("GymFit.Core.City", null)
                        .WithMany("Gyms")
                        .HasForeignKey("CityId");

                    b.HasOne("GymFit.Core.Photo", null)
                        .WithMany("Gyms")
                        .HasForeignKey("PhotoId");
                });

            modelBuilder.Entity("GymFit.Core.Notification", b =>
                {
                    b.HasOne("GymFit.Core.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("GymFit.Core.Reservation", b =>
                {
                    b.HasOne("GymFit.Core.Gym", "Gym")
                        .WithMany("Reservations")
                        .HasForeignKey("GymId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GymFit.Core.User", "Trainer")
                        .WithMany("TrainerReservations")
                        .HasForeignKey("TrainerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("GymFit.Core.User", "User")
                        .WithMany("UserReservations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Gym");

                    b.Navigation("Trainer");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GymFit.Core.TrainerCertificate", b =>
                {
                    b.HasOne("GymFit.Core.Certificates", "Certificate")
                        .WithMany("TrainerCertificates")
                        .HasForeignKey("CertificateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GymFit.Core.User", "Trainer")
                        .WithMany("TrainerCertificates")
                        .HasForeignKey("TrainerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Certificate");

                    b.Navigation("Trainer");
                });

            modelBuilder.Entity("GymFit.Core.Transactions", b =>
                {
                    b.HasOne("GymFit.Core.UserPackage", "UserPackage")
                        .WithMany("Transactions")
                        .HasForeignKey("userPackageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("UserPackage");
                });

            modelBuilder.Entity("GymFit.Core.User", b =>
                {
                    b.HasOne("GymFit.Core.City", null)
                        .WithMany("Users")
                        .HasForeignKey("CityId");

                    b.HasOne("GymFit.Core.Photo", "Photo")
                        .WithMany("Users")
                        .HasForeignKey("PhotoId");

                    b.Navigation("Photo");
                });

            modelBuilder.Entity("GymFit.Core.UserPackage", b =>
                {
                    b.HasOne("GymFit.Core.User", "User")
                        .WithMany("UserPackages")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GymFit.Core.Package", "package")
                        .WithMany()
                        .HasForeignKey("packageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("package");
                });

            modelBuilder.Entity("GymFit.Core.Certificates", b =>
                {
                    b.Navigation("TrainerCertificates");
                });

            modelBuilder.Entity("GymFit.Core.City", b =>
                {
                    b.Navigation("Gyms");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("GymFit.Core.Country", b =>
                {
                    b.Navigation("Cities");
                });

            modelBuilder.Entity("GymFit.Core.Gym", b =>
                {
                    b.Navigation("Arrivals");

                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("GymFit.Core.Photo", b =>
                {
                    b.Navigation("Gyms");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("GymFit.Core.Reservation", b =>
                {
                    b.Navigation("Arrivals");

                    b.Navigation("GroupReservations");
                });

            modelBuilder.Entity("GymFit.Core.User", b =>
                {
                    b.Navigation("Arrivals");

                    b.Navigation("ClientProgress");

                    b.Navigation("GroupReservations");

                    b.Navigation("Notifications");

                    b.Navigation("TrainerCertificates");

                    b.Navigation("TrainerReservations");

                    b.Navigation("UserPackages");

                    b.Navigation("UserReservations");
                });

            modelBuilder.Entity("GymFit.Core.UserPackage", b =>
                {
                    b.Navigation("Arrivals");

                    b.Navigation("Transactions");
                });
#pragma warning restore 612, 618
        }
    }
}
